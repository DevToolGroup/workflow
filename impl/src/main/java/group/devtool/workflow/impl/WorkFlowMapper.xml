<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="group.devtool.workflow.impl.WorkFlowMapper">
    <!--流程定义相关-->
    <resultMap id="definition" type="group.devtool.workflow.impl.WorkFlowDefinitionEntity">
      <id column="id" property="id"/>
      <result column="code" property="code"/>
      <result column="name" property="name"/>
      <result column="version" property="version"/>
      <result column="state" property="state"/>
      <result column="node_code" property="nodeCode"/>
      <result column="root_code" property="rootCode"/>
    </resultMap>

    <resultMap id="nodeDefinition" type="group.devtool.workflow.impl.WorkFlowNodeDefinitionEntity">
      <id column="id" property="id"/>
      <result column="code" property="code"/>
      <result column="name" property="name"/>
      <result column="version" property="version"/>
      <result column="type" property="type"/>
      <result column="config" property="config"/>
      <result column="definition_code" property="definitionCode"/>
      <result column="root_definition_code" property="rootDefinitionCode"/>
    </resultMap>

    <resultMap id="linkDefinition"  type="group.devtool.workflow.impl.WorkFlowLinkDefinitionEntity">
      <id column="id" property="id"/>
      <result column="source" property="source"/>
      <result column="target" property="target"/>
      <result column="expression" property="expression"/>
      <result column="parser" property="parser"/>
      <result column="config" property="config"/>
      <result column="version" property="version"/>
      <result column="definition_code" property="definitionCode"/>
      <result column="root_definition_code" property="rootDefinitionCode"/>
    </resultMap>

    <!--流程实例相关-->
    <resultMap id="variable" type="group.devtool.workflow.impl.WorkFlowVariableEntity">
      <id column="id" property="id"/>
      <result column="name" property="name"/>
      <result column="node" property="node"/>
      <result column="value" property="value"/>
      <result column="root_instance_id" property="rootInstanceId"/>
    </resultMap>

    <resultMap id="instance" type="group.devtool.workflow.impl.WorkFlowInstanceEntity">
      <id column="id" property="id"/>
      <result column="state" property="state"/>
      <result column="instance_id" property="instanceId"/>
      <result column="definition_code" property="definitionCode"/>
      <result column="definition_version" property="definitionVersion"/>
      <result column="parent_task_id" property="parentTaskId"/>
      <result column="root_instance_id" property="rootInstanceId"/>
    </resultMap>

    <resultMap id="task" type="group.devtool.workflow.impl.WorkFlowTaskEntity">
      <id column="id" property="id"/>
      <result column="task_id" property="taskId"/>
      <result column="task_class" property="taskClass"/>
      <result column="task_state" property="taskState"/>
      <result column="complete_user" property="completeUser"/>
      <result column="complete_time" property="completeTime"/>
      <result column="config" property="config"/>
      <result column="node_code" property="nodeCode"/>
      <result column="node_class" property="nodeClass"/>
      <result column="node_state" property="nodeState"/>
      <result column="instance_id" property="instanceId"/>
      <result column="root_instance_id" property="rootInstanceId"/>
    </resultMap>

    <resultMap id="delayTask" type="group.devtool.workflow.impl.WorkFlowSchedulerImpl.DelayItemImpl">
      <id column="id" property="id"/>
      <result column="item_id" property="itemId"/>
      <result column="task_id" property="taskId"/>
      <result column="root_instance_id" property="rootInstanceId"/>
    </resultMap>

    <resultMap id="operation" type="group.devtool.workflow.impl.MybatisWorkFlowTransactionOperationEntity">
      <id column="id" property="id"/>
      <result column="tx_id" property="txId"/>
      <result column="type" property="type"/>
      <result column="state" property="state"/>
      <result column="instance_id" property="instanceId"/>
      <result column="root_instance_id" property="rootInstanceId"/>
      <result column="node_code" property="nodeCode"/>
      <result column="task_id" property="taskId"/>
      <result column="variable_id" property="variableId"/>
      <result column="tx_timestamp" property="txTimestamp"/>
    </resultMap>

    <!-- SQL 语句-->
    <insert id="idIncrement" useGeneratedKeys="true" keyProperty="id" parameterType="group.devtool.workflow.impl.MybatisWorkFlowIncrementID">
        insert into wf_id_increment (`time`) values (#{record.time})
    </insert>

    <insert id="bulkSaveDefinition" useGeneratedKeys="true" keyProperty="id" parameterType="group.devtool.workflow.impl.WorkFlowDefinitionEntity">
        insert into wf_definition 
            (code, name, version, state, node_code, root_code) 
        values 
           <foreach item="item" index="index" collection="items" separator=",">
                (#{item.code}, #{item.name}, #{item.version}, #{item.state}, #{item.nodeCode}, #{item.rootCode})
            </foreach>
    </insert>

    <insert id="bulkSaveNodeDefinition" useGeneratedKeys="true" keyProperty="id" parameterType="group.devtool.workflow.impl.WorkFlowNodeDefinitionEntity">
        insert into wf_node_definition
            (code, name, type, config, version, definition_code, root_definition_code) 
        values 
            <foreach item="node" index="index" collection="nodes" separator=",">
                (#{node.code}, #{node.name}, #{node.type}, #{node.config}, #{node.version}, #{node.definitionCode}, #{node.rootDefinitionCode})
            </foreach>
    </insert>

    <insert id="bulkSaveLinkDefinition" useGeneratedKeys="true" keyProperty="id" parameterType="group.devtool.workflow.impl.WorkFlowLinkDefinitionEntity">
        insert into wf_link_definition 
            (source, target, parser, expression, version, definition_code, root_definition_code) 
        values 
            <foreach item="link" index="index" collection="links" separator=",">
                (#{link.source}, #{link.target}, #{link.parser}, #{link.expression}, #{link.version}, #{link.definitionCode}, #{link.rootDefinitionCode})
            </foreach>
    </insert>

    <update id="changeState">
        update 
            wf_definition 
        set 
            state = #{afterState} 
        where 
            root_code = #{code} 
            and state = #{beforeState}
    </update>

    <select id="loadDefinition" resultMap="definition">
        select 
            id, code, name, version, state, node_code, root_code
        from wf_definition
        where
            <choose>
              <when test="recursion == true">
                root_code = #{code}
              </when>
              <otherwise>
                code = #{code}
              </otherwise>
            </choose>
            and version = #{version}
    </select>

    <select id="loadDeployedDefinition" resultMap="definition">
        select 
            id, code, name, version, state, node_code, root_code
        from wf_definition
        where 
            code = #{code}
            and state = 'Y'
    </select>

    <select id="loadDefinitionLatestVersion" resultType="java.lang.Integer">
      select 
          max(version)
      from wf_definition
      where 
          code = #{code}
  </select>

    <select id="loadNodeDefinition" resultMap="nodeDefinition">
        select 
            id, code, type, name, config, version, definition_code, root_definition_code
        from 
            wf_node_definition 
        where 
        <choose>
          <when test="recursion == true">
            root_definition_code = #{code}
          </when>
          <otherwise>
            definition_code = #{code}
          </otherwise>
        </choose>
        and version = #{version}
    </select>

    <select id="loadLinkDefinition" resultMap="linkDefinition">
        select 
            id, source, target, parser, expression, version, definition_code, root_definition_code
        from 
            wf_link_definition 
        where 
        <choose>
          <when test="recursion == true">
            root_definition_code = #{code}
          </when>
          <otherwise>
            definition_code = #{code}
          </otherwise>
        </choose>
        and version = #{version}
    </select>

    <select id="loadVariable" resultMap="variable">
        select
            id, name, node, `value`, root_instance_id
        from wf_instance_variable
        where root_instance_id = #{instanceId}
        order by id desc
    </select>

    <insert id="bulkSaveVariable" useGeneratedKeys="true" keyProperty="id" parameterType="group.devtool.workflow.impl.WorkFlowVariableEntity">
        insert into wf_instance_variable 
            (name, `value`, task_id, node, root_instance_id)
        values 
            <foreach collection="variables" item="variable" index="index" separator=",">
                (#{variable.name}, #{variable.value}, #{variable.taskId}, #{variable.node}, #{variable.rootInstanceId})
            </foreach>
    </insert>

    <select id="loadInstance" resultMap="instance">
        select
            id, state, definition_code, definition_version, instance_id, parent_task_id, root_instance_id
        from 
            wf_instance
        where instance_id = #{instanceId} and root_instance_id = #{rootInstanceId}
    </select>

    <select id="loadTaskByActiveNode" resultMap="task">
        select
            id, task_id, task_class, task_state, complete_user, complete_time, config, node_code, node_class, node_state, instance_id, root_instance_id
        from 
            wf_instance_task
        where 
            node_code = #{nodeCode} 
            and node_state = 'DOING'
            and root_instance_id = #{rootInstanceId}
    </select>

    <select id="loadTaskByTaskId" resultMap="task">
        select
            id, task_id, task_class, task_state, complete_user, complete_time, config, node_code, node_class, node_state, instance_id, root_instance_id
        from 
            wf_instance_task
        where 
            task_id = #{taskId}
            and root_instance_id = #{rootInstanceId}
            and task_state = 'DOING'
    </select>

    <select id="loadActiveTask" resultMap="task">
      select
          id, task_id, task_class, task_state, complete_user, complete_time, config, node_code, node_class, node_state, instance_id, root_instance_id
      from 
          wf_instance_task
      where 
          root_instance_id = #{rootInstanceId}
          and task_state = 'DOING'
  </select>

    <update id="changeTaskComplete">
        update 
            wf_instance_task
        set 
          task_state = 'DONE',
          complete_user = #{completeUser},
          complete_time = #{completeTime}
        where
            task_id = #{taskId}
            and root_instance_id = #{rootInstanceId}
            and task_state = 'DOING'
    </update>

    <update id="changeNodeComplete">
        update 
            wf_instance_task
        set node_state = 'DONE'
        where
            node_code = #{nodeCode}
            and root_instance_id = #{rootInstanceId}
            and node_state = 'DOING'
    </update>

    <update id="updateInstance">
        update 
            wf_instance
        set state = #{entity.state}
        where
            id = #{entity.id}
    </update>

    <insert id="saveInstance" useGeneratedKeys="true" keyProperty="id" parameterType="group.devtool.workflow.impl.WorkFlowInstanceEntity">
        insert into wf_instance
            (instance_id, state, parent_task_id, root_instance_id, definition_code, definition_version) 
        values
            (#{entity.instanceId}, 
             #{entity.state},
             #{entity.parentTaskId}, 
             #{entity.rootInstanceId},
             #{entity.definitionCode}, 
             #{entity.definitionVersion}
            )
    </insert>

    <insert id="bulkSaveTask" useGeneratedKeys="true" keyProperty="id" parameterType="group.devtool.workflow.impl.WorkFlowTaskEntity">
        insert into wf_instance_task
            (task_id, task_class, task_state, complete_user, complete_time, config, node_code, node_class, node_state, instance_id, root_instance_id) 
        values 
            <foreach item="task" index="index" collection="tasks" separator=",">
                (#{task.taskId}, #{task.taskClass}, #{task.taskState}, #{task.completeUser}, #{task.completeTime}, #{task.config}, #{task.nodeCode}, #{task.nodeClass}, #{task.nodeState}, #{task.instanceId}, #{task.rootInstanceId})
            </foreach>
    </insert>

    <insert id="addDelayTask" useGeneratedKeys="true" keyProperty="id" parameterType="group.devtool.workflow.impl.WorkFlowSchedulerImpl.DelayItemImpl">
      insert into wf_instance_delay_task
        (item_id, delay, state, task_id, root_instance_id)
      values (
        #{item.itemId},
        #{item.delay},
        'PENDING',
        #{item.taskId},
        #{item.rootInstanceId}
      )
    </insert>

    <select id="loadDelayTask" resultMap="delayTask">
      select 
        id, item_id, task_id, root_instance_id
      from 
        wf_instance_delay_task 
      where 
        delay >= #{current} 
        and state = 'PENDING'
    </select>

    <update id="setDelaySuccess">
      update 
        wf_instance_delay_task
      set 
        state = 'SUCCESS'
      where 
        item_id = #{itemId}
        and root_instance_id = #{rootInstanceId}
    </update>

    <insert id="addTransactionOperation" useGeneratedKeys="true" keyProperty="id" parameterType="group.devtool.workflow.impl.MybatisWorkFlowTransactionOperationEntity">
      insert into wf_transaction_operation
      (tx_id, type, state, instance_id, root_instance_id, node_code, task_id, variable_id, tx_timestamp)
      values (
        #{entity.txId},
        #{entity.type},
        'PENDING',
        #{entity.instanceId},
        #{entity.rootInstanceId},
        #{entity.nodeCode},
        #{entity.taskId},
        #{entity.variableId},
        #{entity.txTimestamp}
      )
    </insert>

    <select id="loadTransactionOperation" resultMap="operation">
      select 
        * 
      from 
        wf_transaction_operation 
      where 
        root_instance_id = #{rootInstanceId}
    </select>

    <delete id="cleanTransactionOperation">
      delete from 
        wf_transaction_operation 
      where 
        tx_id = #{txId} 
        and root_instance_id = #{rootInstanceId}
    </delete>

    <update id="doRollbackOperation">
      update wf_transaction_operation
      set state = 'DONE'
      where id = #{id}
      and root_instance_id = #{rootInstanceId}
    </update>

    <delete id="deleteVariableById">
      delete from 
        wf_instance_variable 
      where 
        id in (
          <foreach collection="ids" item="id" separator=",">
          #{id}
          </foreach>
        )
        and root_instance_id = #{rootInstanceId}
    </delete>

    <delete id="deleteTaskById">
      delete from 
        wf_instance_task 
      where 
        task_id in (
          <foreach collection="ids" item="id" separator=",">
          #{id}
          </foreach>
        )
        and root_instance_id = #{rootInstanceId}
    </delete>
    
    <delete id="deleteInstanceById">
      delete from 
        wf_instance
      where 
        instance_id = #{instanceId}
        and root_instance_id = #{rootInstanceId}
    </delete>
    
    <update id="changeTaskDoing">
      update wf_instance_task
      set 
        task_state = 'DOING',
        complete_user = NULL,
        complete_time = NULL
      where 
        task_state = 'DONE'
        and task_id = #{taskId}
        and root_instance_id = #{rootInstanceId}
    </update>

    <update id="changeNodeDoing">
      update wf_instance_task
      set 
        node_state = 'DOING'
      where 
        node_state = 'DONE'
        and node_code = #{nodeCode}
        and root_instance_id = #{rootInstanceId}
    </update>

</mapper>